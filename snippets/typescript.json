{
  "abpBaseAsyncComponent": {
    "prefix": "abpBaseAsyncComponent",

    "description": "base async component",

    "body": [
      "import { BaseAsyncComponent } from '@abpdz/ng.theme.shared';",
      "import { HttpClient } from '@angular/common/http';",
      "import { Component, Injector, OnInit } from '@angular/core';",
      "",
      "@Component({",
      "  selector: 'app-${2:${TM_FILENAME_BASE/[\\.]component//}}',",
      "  templateUrl: './${3:${TM_FILENAME_BASE}}.html',",
      "  styleUrls: ['./${3:${TM_FILENAME_BASE}}.scss'],",
      "})",
      "export class ${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}} extends BaseAsyncComponent implements OnInit {",
      "  constructor(private httpClient: HttpClient, injector: Injector) {",
      "    super(injector);",
      "  }",
      "",
      "  ngOnInit(): void {}",
      "}"
    ]
  },
  "abpLazyModule": {
    "prefix": "abpLazyModule",
    "description": "",
    "body": [
      "import { ModuleWithProviders, NgModule, NgModuleFactory } from '@angular/core';",
      "import { CommonModule } from '@angular/common';",
      "",
      "import { ${1:${TM_FILENAME_BASE/(.*module)/${1:/pascalcase}/g}}RoutingModule } from './audit-routing.module';",
      "import { CoreModule, LazyModuleFactory } from '@abpdz/ng.core';",
      "import { ThemeSharedModule } from '@abpdz/ng.theme.shared';",
      "import { NgxValidateCoreModule } from '@ngx-validate/core';",
      "import { MatTableModule } from '@angular/material/table';",
      "import { MatPaginatorModule } from '@angular/material/paginator';",
      "",
      "@NgModule({",
      "  declarations: [],",
      "  imports: [",
      "    CommonModule,",
      "    $1RoutingModule,",
      "    CommonModule,",
      "    ThemeSharedModule,",
      "    MatTableModule,",
      "    MatPaginatorModule,",
      "    CoreModule.forLazy(),",
      "    NgxValidateCoreModule,",
      "  ],",
      "})",
      "export class $1Module {",
      "  static forChild(): ModuleWithProviders<$1Module> {",
      "    return {",
      "      ngModule: $1Module,",
      "      providers: [],",
      "    };",
      "  }",
      "  static forLazy(): NgModuleFactory<$1Module> {",
      "    return new LazyModuleFactory($1Module.forChild());",
      "  }",
      "}"
    ]
  },
  "abpConfigLazyModule": {
    "prefix": "abpConfigLazyModule",
    "description": "",
    "body": [
      "import { APP_INITIALIZER, ModuleWithProviders, NgModule } from '@angular/core';",
      "import { CommonModule } from '@angular/common';",
      "import { eLayoutType, RoutesService } from '@abpdz/ng.core';",
      "import { eThemeSharedRouteNames } from '@abpdz/ng.theme.shared';",
      "",
      "export function configureRoutes(routes: RoutesService) {",
      "  return () => {",
      "    routes.add([",
      "      {",
      "        path: '${2:/pathto_module/log}',",
      "        name: '${3:Module::NAME}',",
      "        parentName: eThemeSharedRouteNames.Administration,",
      "        requiredPolicy: 'AbpIdentity.Users',",
      "        iconClass: 'open_in_browser',",
      "        layout: eLayoutType.application,",
      "        order: 10,",
      "      },",
      "    ]);",
      "  };",
      "}",
      "",
      "@NgModule({",
      "  declarations: [],",
      "  imports: [CommonModule],",
      "})",
      "export class ${1:${TM_FILENAME_BASE/(.*module)/${1:/pascalcase}/g}}ConfigModule {",
      "  static forRoot(): ModuleWithProviders<$1ConfigModule> {",
      "    return {",
      "      ngModule: $1ConfigModule,",
      "      providers: [",
      "        {",
      "          provide: APP_INITIALIZER,",
      "          useFactory: configureRoutes,",
      "          deps: [RoutesService],",
      "          multi: true,",
      "        },",
      "      ],",
      "    };",
      "  }",
      "}"
    ]
  },
  "abpPermissionGuardedRoute": {
    "prefix": "abpPermissionGuardedRoute",
    "description": "",
    "body": [
      "{",
      "  canActivate: [PermissionGuard],\r",
      "  path: 'log',\r",
      "  component: ${1:AuditLogComponent},\r",
      "  data: {\r",
      "    requiredPolicy: 'AbpIdentity.Users',\r",
      "  },",
      "}$0,"
    ]
  }
}
