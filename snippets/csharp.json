{
  "ASP.NET Core - Creates a MVC/Api Action": {
    "prefix": "ac_action",
    "body": [
      "[${1:HttpGet}(nameof($2))]",
      "public async Task<IActionResult> ${2:ActionName}(${3:string} ${4:name})",
      "{",
      "\t$0",
      "\treturn Ok;",
      "}"
    ],
    "description": "ASP.NET Core - Creates a MVC/Api Action"
  },

  "abpMvcModule": {
    "prefix": "abpMvcModule",
    "description": "",
    "body": [
      "using System;",
      "using Volo.Abp.Account;",
      "using Volo.Abp.AutoMapper;",
      "using Volo.Abp.FeatureManagement;",
      "using Volo.Abp.Identity;",
      "using Volo.Abp.Modularity;",
      "using Volo.Abp.PermissionManagement;",
      "using Volo.Abp.TenantManagement;",
      "using Volo.Abp.AspNetCore.Mvc;",
      "namespace ${3:${WORKSPACE_NAME}.${TM_DIRECTORY/^.*(\\/|\\\\)([^(\\/|\\\\)]+)$/$2/}}",
      "{",
      "    [DependsOn(",
      "        typeof(AbpAccountApplicationModule),",
      "        typeof(AbpIdentityApplicationModule),",
      "        typeof(AbpPermissionManagementApplicationModule),",
      "        typeof(AbpTenantManagementApplicationModule),",
      "    )]",
      "    public class ${1:${TM_FILENAME_BASE}} : AbpModule",
      "    {",
      "        public override void ConfigureServices(ServiceConfigurationContext context)",
      "        {",
      "            Configure<AbpAutoMapperOptions>(options =>",
      "            {",
      "                options.AddMaps<$1>();",
      "            });",
      "",
      "            Configure<AbpAspNetCoreMvcOptions>(options =>",
      "            {",
      "                options.ConventionalControllers.Create(typeof($1).Assembly);",
      "            });",
      "            $0",
      "        }",
      "    }",
      "}",
      ""
    ]
  },
  "abpI18nResource": {
    "prefix": "abpI18nResource",
    "description": "",
    "body": [
      "Configure<AbpVirtualFileSystemOptions>(options =>",
      "{",
      "  options.FileSets.AddEmbedded<${4:${TM_FILENAME_BASE}}>(\"${1:AbpDz}\",\"/${2:AbpDzUI}\");",
      "});",
      "",
      "Configure<AbpLocalizationOptions>(options =>",
      "{",
      "  options.Resources",
      "    .Add<${3:AbpDzResource}>(\"en\")",
      "    .AddVirtualJson(\"/$2\");",
      "    options.DefaultResourceType = typeof($3);",
      "});",
      "",
      "Configure<AbpExceptionLocalizationOptions>(options =>",
      "{",
      "  options.MapCodeNamespace(\"$1\", typeof($3));",
      "});"
    ]
  },
  "abpPermissionDefinitionProvider": {
    "prefix": "abpPermissionDefinitionProvider",
    "description": "",
    "body": [
      "using Volo.Abp.Authorization.Permissions;",
      "",
      "namespace ${3:${WORKSPACE_NAME}.${TM_DIRECTORY/^.*(\\/|\\\\)([^(\\/|\\\\)]+)$/$2/}}",
      "{",
      "    public class ${1:${TM_FILENAME_BASE}} : PermissionDefinitionProvider",
      "    {",
      "        public override void Define(IPermissionDefinitionContext context)",
      "        {",
      "            var myGroupname = \"${2:${WORKSPACE_NAME}}\";",
      "            var myGroup = context.AddGroup(myGroupname);",
      "",
      "            myGroup.AddPermission(myGroupname+\"_TDB\");",
      "        }",
      "    }",
      "}"
    ]
  },
  "abpFullAuditedEntity": {
    "prefix": "abpFullAuditedEntity",
    "description": "",
    "body": [
      "public partial class ${1:${TM_FILENAME_BASE}} : FullAuditedAggregateRoot<Guid>, IEntityDto<Guid>",
      "{",
      "    public Guid Id",
      "    {",
      "        get { return base.Id; }",
      "        set { base.Id = value; }",
      "    }",
      "    public static void OnModelCreating(ModelBuilder builder)",
      "    {",
      "        builder.Entity<${1}>(b =>",
      "        {",
      "            b.ToTable(nameof(${1}));",
      "        });",
      "    }",
      "    public DbSet<${1}> ${1}s { get; set; }",
      "}"
    ]
  },
  "abpStringProp": {
    "prefix": "abpStringProp",
    "description": "",
    "body": [
      "[Display(Name = \"${4:${1}}\")]",
      "[StringLength(${3:256})]",
      "public ${2:string} ${1:PropName} { get; set; }${0}"
    ]
  },
  "abpProp": {
    "prefix": "abpProp",
    "description": "",
    "body": [
      "[Display(Name = \"${4:${1}}\")]",
      "public ${2:int} ${1:PropName} { get; set; }${0}"
    ]
  },
  "abpdzDesignTimeDbContextFactory": {
    "prefix": "abpdzDesignTimeDbContextFactory",

    "description": "",

    "body": [
      "public class ${1:${TM_FILENAME_BASE}}DesignTimeDbContextFactory : IDesignTimeDbContextFactory<${1}>",
      "{",
      "    public ${1} CreateDbContext(string[] args)",
      "    {",
      "        var optionsBuilder = new DbContextOptionsBuilder<${1}>();",
      "        optionsBuilder.UseSqlite(\"Data Source=blog.db\");",

      "        return new ${1}(optionsBuilder.Options);",
      "    }",
      "}"
    ]
  }
}
